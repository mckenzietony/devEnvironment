AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Region:
    Type: String
    Default: ap-northeast-1
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "prod-trader-nrt"

Mappings:
  RegionMap:
    us-west-2:
      AMI: "ami-00f9f4069d04c0c6e"
    ap-northeast-1:
      AMI: "ami-06098fd00463352b6"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  NatA:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt: EipA.AllocationId
      SubnetId:
         Ref: PublicSubnetA
  EipA:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NatRouteA:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
          Ref: PrivateRouteTableA
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatA

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  EC2SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "As it says on the tin"
      GroupName: !Sub ${AWS::StackName}-SG-SSH
      SecurityGroupIngress: 
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0

      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-SG-SSH
      VpcId: !Ref VPC

  EC2SSHPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "As it says on the tin"
      GroupName: !Sub ${AWS::StackName}-SG-SSH-private
      SecurityGroupIngress: 
        -
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref EC2SSHSecurityGroup
        -
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 10.0.0.0/16
        
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-SG-SSH-private
      VpcId: !Ref VPC

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-instance-profile-bastion
      Path: /
      Roles: 
       - !Ref EC2InstanceRole

  IAMInstanceProfileTerra:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-instance-profile-terra
      Path: /
      Roles: 
       - !Ref EC2InstanceRoleTerra

  EC2InstanceRole:
    Type: AWS::IAM::Role
    DependsOn: DDBTerraProdState
    Properties:
      RoleName: !Sub ${AWS::StackName}-ec2-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  EC2InstanceRoleTerra:
    Type: AWS::IAM::Role
    DependsOn: S3TerraProdConfigBucket
    Properties:
      RoleName: !Sub ${AWS::StackName}-ec2-instance-role-terra
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  IAMInstanceTerraPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EC2InstanceRoleTerra    
    Properties:
      PolicyName: !Sub ${AWS::StackName}-s3-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Join ['', ["arn:aws:s3:::", !Ref S3TerraProdConfigBucket]]
              - !Join ['', ["arn:aws:s3:::", !Ref S3TerraProdConfigBucket, "/*"]]
          -
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
            Resource:
              - !Join ['', ["arn:aws:dynamodb:*:*:table/", !Ref DDBTerraProdState]]
          - 
            Effect: Allow
            Action:
             - ec2:*
             - vpc:*
             - iam:*
             - ecs:*
             - ecr:*
             - autoscaling:*
            Resource:
             - "*"
          - 
            Effect: Allow
            Action:
             - ssm:PutParameter
             - ssm:GetParameter
             - ssm:AddTagsToResource
             - ssm:AddTagsToResource
             - ssm:RemoveTagsFromResource
            Resource:
             - "*"
          -            
            Effect: Allow
            Action:
             - organizations:CreateOrganization
             - organizations:EnableAWSServiceAccess
             - organizations:DisableAWSServiceAccess
             - organizations:DescribeOrganizations
             - organizations:ListRoots
             - organizations:ListAccounts
             - organizations:ListAWSServiceAccessForOrganizations
            Resource:
             - "*"
      Roles:
        -
          !Ref EC2InstanceRoleTerra

  EC2TerraProdInstance:
    Type: AWS::EC2::Instance
    DependsOn: EC2InstanceRole
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref IAMInstanceProfileTerra
      InstanceType: t2.micro
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref EC2SSHPrivateSecurityGroup
          SubnetId: !Ref PrivateSubnetA
      Tags: 
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName","-", !Ref "AWS::Region", "-EC2", "-Terra", "-Prod" ]]
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash

            yum update -y
            yum install -y yum-utils

            # Register the Microsoft RedHat repository
            curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo

            # Install PowerShell
            yum install powershell -y

            # Allow access using powershell
            echo "  " >> /etc/ssh/sshd_config
            echo "# Powershell Subsystem -- Allow pwsh remoting" >> /etc/ssh/sshd_config
            echo "Subsystem powershell /usr/bin/pwsh -sshs -NoLogo" >> /etc/ssh/sshd_config
            systemctl restart sshd

            # Install terraform
            yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            yum -y install terraform

            # terraform cli autocomplete
            terraform -install-autocomplete

            # initialize terraform
            terraform init

            # we can automate the pull of terraform templates here in the future
            # possibly pull from s3 or git

  EC2BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn: EC2InstanceRole
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref IAMInstanceProfile
      InstanceType: t2.micro
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref EC2SSHSecurityGroup
          SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName","-", !Ref "AWS::Region", "-EC2","-Bastion", "-Prod" ]]
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash

            yum update -y
            yum install -y yum-utils

            # Register the Microsoft RedHat repository
            curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo

            # Install PowerShell
            yum install powershell -y

            # Allow access using powershell
            echo "  " >> /etc/ssh/sshd_config
            echo "# Powershell Subsystem -- Allow pwsh remoting" >> /etc/ssh/sshd_config
            echo "Subsystem powershell /usr/bin/pwsh -sshs -NoLogo" >> /etc/ssh/sshd_config
            systemctl restart sshd

  S3TerraProdConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  DDBTerraProdState:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: LockID
          AttributeType: S
      KeySchema:
        - 
          AttributeName: LockID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 

  DDBSSHProdPubKeyStore:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: SSHKeyName
          AttributeType: S
        - 
          AttributeName: SSHKeyValue
          AttributeType: S          
      KeySchema:
        - 
          AttributeName: SSHKeyName
          KeyType: HASH
        - 
          AttributeName: SSHKeyValue
          KeyType: RANGE

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
  BastionHost:
    Description: For access to terraform instances from public internet
    Value: !Ref EC2BastionInstance
  TerraformEC2InstanceProd:
    Description: Hosts proudction terraform service
    Value: !Ref EC2TerraProdInstance
  TerraformStateDBProd:
    Description: State locking db
    Value: !Ref DDBTerraProdState
  DDBSSHPubKeyStoreProd:
    Description: Store public ssh keys - Don't be a jackass and put private keys in here
    Value: !Ref DDBSSHProdPubKeyStore
  TerraformStateS3Prod:
    Description: Contains s3 state data
    Value: !Ref S3TerraProdConfigBucket

resource "aws_vpc" "vpc" {
    cidr_block = "10.0.0.0/22"
    enable_dns_support = true
    enable_dns_hostnames = true
}

resource "aws_internet_gateway" "internet_gateway" {
    vpc_id = "aws_vpc.vpc.id"
}

resource "aws_subnet" "pub_subnet" {
    vpc_id = aws_vpc.vpc.id
    cidr_block = "10.0.1.0/24"
    availability_zone = "ap-northeast-1c"
}

resource "aws_route_table" "public" {
    vpc_id = aws_vpc.vpc.id

    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.internet_gateway.id
    }
}

resource "aws_route_table_association" "route_table_association" {
    subnet_id = aws_subnet.pub_subnet.id
    route_table_id = aws_route_table.public.id
}

resource "aws_security_group" "ecs_sg" {
    vpc_id = aws_vpc.vpc.id

    ingress {
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port = 0
        to_port = 0
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

data "aws_iam_policy_document" "ecs_agent" {
    statement {
        actions = ["sts:AssumeRole"]

        principals {
          type = "Service"
          identifiers = ["ec2.amazonaws.com"]
        }
    }
}

resource "aws_iam_role" "ecs_agent" {
    name = "ecs-agent"
    assume_role_policy = data.aws_iam_policy_document.ecs_agent.json
}

resource "aws_iam_role_policy_attachment" "ecs_agent" {
    role = "aws_iam_role.ecs_agent"
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
}

resource "aws_iam_instance_profile" "ecs_agent" {
    name = "ecs-agent"
    role = aws_iam_role.ecs_agent.name
}

resource "aws_launch_configuration" "ecs_launch_config" {
    image_id = "ami-05db638db4083f945"
    iam_instance_profile = aws_iam_instance_profile.ecs_agent.name
    security_groups = [aws_security_group.ecs_sg.id]
    user_data = "#!/bin/bash\\ ECS_CLUSTER=trader-bois >> /etc/ecs/ecs.config"
    instance_type = "m5zn.large"
}

resource "aws_autoscaling_group" "ecs_asg" {
    name = "asg"
    vpc_zone_identifier = [aws_subnet.pub_subnet.id ]
    launch_configuration = aws_launch_configuration.ecs_launch_config.name

    desired_capacity = 1
    min_size = 1
    max_size = 1
    health_check_grace_period = 300
    health_check_type = "EC2"
}

resource "aws_ecr_repository" "worker" {
    name = "worker"
}

resource "aws_ecs_cluster" "ecs_cluster" {
    name = "trader-bois"
}

data "template_file" "task_definition_template" {
    template = file("task_definition.json.tpl")
    vars = {
        REPOSITORY_URL = replace(aws_ecr_repository.worker.repository_url, "https://", "")
    }
}

resource "aws_ecs_task_definition" "task_definition" {
    family = "worker"
    container_definitions = data.template_file.task_definition_template.rendered
}

resource "aws_ecs_service" "worker" {
    name = "worker"
    cluster = aws_ecs_cluster.ecs_cluster.id
    task_definition = aws_ecs_task_definition.task_definition.arn
    desired_count = 1
}

output "ecr_repository_worker_endpoint" {
    value = aws_ecr_repository.worker.repository_url
}